AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  github-actions-with-aws-sam

  Sample SAM Template for github-actions-with-aws-sam

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      AccessControl: PublicRead
      BucketName: gnguyendo-cloud-resume-website
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3Bucket
                - /*
            Principal: '*'

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - geoffreynguyendo-resume.com
          - www.geoffreynguyendo-resume.com
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          CachePolicyId: !Ref CloudFrontCachePolicy
          TargetOriginId: gnguyendoS3origin
          ViewerProtocolPolicy: redirect-to-https
        IPV6Enabled: True
        Enabled: True
        Origins:
          - CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginKeepaliveTimeout: 5
              OriginProtocolPolicy: match-viewer
              OriginReadTimeout: 15
              OriginSSLProtocols:
                - SSLv3
                - TLSv1
                - TLSv1.1
                - TLSv1.2
            DomainName: !Join
            - ''
            - - !Ref S3Bucket
              - '.s3-website-us-east-1.amazonaws.com'
            Id: gnguyendoS3origin # A unique identifier for the origin. This value must be unique within the distribution.
        ViewerCertificate:
          AcmCertificateArn: "arn:aws:acm:us-east-1:976309919253:certificate/7e3f5656-09e9-45e6-a769-13bf6e2fafe8"
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only


  CloudFrontCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        DefaultTTL: 1
        MaxTTL: 1
        MinTTL: 1
        Name: gnguyendo-cloudfront-cache-policy
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: all
          EnableAcceptEncodingGzip: True
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: all

  ACMCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: geoffreynguyendo-resume.com
      CertificateTransparencyLoggingPreference: ENABLED
      DomainValidationOptions:
        - DomainName: geoffreynguyendo-resume.com
          HostedZoneId: Z04370213OSM26SKRBEJW
      ValidationMethod: DNS

  Route53DNSRecordSetGroup:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: Z04370213OSM26SKRBEJW
      RecordSets:
        - Name: geoffreynguyendo-resume.com
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt CloudFrontDistribution.DomainName
        - Name: www.geoffreynguyendo-resume.com
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt CloudFrontDistribution.DomainName

  TempLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          def test_lambda(event, context):
            message = "Hello Lambda World!"
            return message
      FunctionName: TestLambdaFn
      Handler: test_lambda.handler
      Role: !GetAtt TempLambdaRole.Arn
      Runtime: python3.8

  TempLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: TestLambdaRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole

Outputs:
  WebsiteURL:
    Value: !GetAtt
      - S3Bucket
      - WebsiteURL
    Description: URL for website hosted on S3
  S3BucketSecureURL:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - S3Bucket
          - DomainName
    Description: Name of S3 bucket to hold website content
